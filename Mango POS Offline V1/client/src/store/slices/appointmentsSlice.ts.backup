import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { appointmentsDB } from '../../db/database';
import { syncQueueDB } from '../../db/database';
import type { Appointment, CreateAppointmentInput } from '../../types';
import type { RootState } from '../index';

interface AppointmentsState {
  items: Appointment[];
  selectedDate: Date;
  selectedAppointment: Appointment | null;
  loading: boolean;
  error: string | null;
}

const initialState: AppointmentsState = {
  items: [],
  selectedDate: new Date(),
  selectedAppointment: null,
  loading: false,
  error: null,
};

// Async thunks
export const fetchAppointmentsByDate = createAsyncThunk(
  'appointments/fetchByDate',
  async ({ salonId, date }: { salonId: string; date: Date }) => {
    return await appointmentsDB.getByDate(salonId, date);
  }
);

export const createAppointment = createAsyncThunk(
  'appointments/create',
  async ({ input, userId, salonId }: { input: CreateAppointmentInput; userId: string; salonId: string }) => {
    const appointment = await appointmentsDB.create(input, userId, salonId);
    
    // Add to sync queue
    await syncQueueDB.add({
      type: 'create',
      entity: 'appointment',
      entityId: appointment.id,
      action: 'CREATE',
      payload: appointment,
      priority: 3,
      maxAttempts: 5,
    });
    
    return appointment;
  }
);

export const updateAppointment = createAsyncThunk(
  'appointments/update',
  async ({ id, updates, userId }: { id: string; updates: Partial<Appointment>; userId: string }) => {
    const appointment = await appointmentsDB.update(id, updates, userId);
    
    if (appointment) {
      await syncQueueDB.add({
        type: 'update',
        entity: 'appointment',
        entityId: id,
        action: 'UPDATE',
        payload: appointment,
        priority: 3,
        maxAttempts: 5,
      });
    }
    
    return appointment;
  }
);

export const checkInAppointment = createAsyncThunk(
  'appointments/checkIn',
  async ({ id, userId }: { id: string; userId: string }) => {
    const appointment = await appointmentsDB.checkIn(id, userId);
    
    if (appointment) {
      await syncQueueDB.add({
        type: 'update',
        entity: 'appointment',
        entityId: id,
        action: 'UPDATE',
        payload: appointment,
        priority: 2,
        maxAttempts: 5,
      });
    }
    
    return appointment;
  }
);

export const deleteAppointment = createAsyncThunk(
  'appointments/delete',
  async (id: string) => {
    await appointmentsDB.delete(id);
    
    await syncQueueDB.add({
      type: 'delete',
      entity: 'appointment',
      entityId: id,
      action: 'DELETE',
      payload: { id },
      priority: 3,
      maxAttempts: 5,
    });
    
    return id;
  }
);

const appointmentsSlice = createSlice({
  name: 'appointments',
  initialState,
  reducers: {
    setAppointments: (state, action: PayloadAction<Appointment[]>) => {
      state.items = action.payload;
    },
    setSelectedDate: (state, action: PayloadAction<Date>) => {
      state.selectedDate = action.payload;
    },
    setSelectedAppointment: (state, action: PayloadAction<Appointment | null>) => {
      state.selectedAppointment = action.payload;
    },
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // Fetch by date
      .addCase(fetchAppointmentsByDate.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchAppointmentsByDate.fulfilled, (state, action) => {
        state.loading = false;
        state.items = action.payload;
      })
      .addCase(fetchAppointmentsByDate.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch appointments';
      })
      // Create
      .addCase(createAppointment.fulfilled, (state, action) => {
        state.items.push(action.payload);
      })
      // Update
      .addCase(updateAppointment.fulfilled, (state, action) => {
        if (action.payload) {
          const index = state.items.findIndex(apt => apt.id === action.payload!.id);
          if (index !== -1) {
            state.items[index] = action.payload;
          }
        }
      })
      // Check-in
      .addCase(checkInAppointment.fulfilled, (state, action) => {
        if (action.payload) {
          const index = state.items.findIndex(apt => apt.id === action.payload!.id);
          if (index !== -1) {
            state.items[index] = action.payload;
          }
        }
      })
      // Delete
      .addCase(deleteAppointment.fulfilled, (state, action) => {
        state.items = state.items.filter(apt => apt.id !== action.payload);
      });
  },
});

export const { setAppointments, setSelectedDate, setSelectedAppointment, clearError } = appointmentsSlice.actions;

// Selectors
export const selectAllAppointments = (state: RootState) => state.appointments.items;
export const selectSelectedDate = (state: RootState) => state.appointments.selectedDate;
export const selectSelectedAppointment = (state: RootState) => state.appointments.selectedAppointment;
export const selectAppointmentsLoading = (state: RootState) => state.appointments.loading;
export const selectAppointmentsError = (state: RootState) => state.appointments.error;

export default appointmentsSlice.reducer;
